AWSTemplateFormatVersion: 2010-09-09

Resources:
  NullString:
    Type: AWS::SSM::Parameter
    Properties:
      Name: NullString
      Type: String
      Value: "null"

  WildCardString:
    Type: AWS::SSM::Parameter
    Properties:
      Name: WildCardString
      Type: String
      Value: "*"

  NullStringList:
    Type: AWS::SSM::Parameter
    Properties:
      Name: NullStringList
      Type: StringList
      Value: "null,null"

  RootUserArnStringList:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RootUserArnStringList
      Type: StringList
      Value: !Sub arn:aws:iam::${AWS::AccountId}:root

  AmazonLinuxAmiId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AmazonLinuxAmiId
      Type: String
      Value: !Ref LatestAmazonLinuxAmiId

  DescribeImagesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: ec2:DescribeImages
                Effect: Allow
                Resource: "*"

  GetLatestAMI:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !Sub ${DescribeImagesRole.Arn}
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback

          def handler(event, context):
            try:
              response = boto3.client('ec2').describe_images(
                  Owners=[event['ResourceProperties']['Owner']],
                  Filters=[
                    {'Name': 'name', 'Values': [event['ResourceProperties']['Name']]},
                    {'Name': 'architecture', 'Values': [event['ResourceProperties']['Architecture']]},
                    {'Name': 'root-device-type', 'Values': ['ebs']},
                  ],
              )

              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
              id = amis[0]['ImageId']

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except:
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, "")

  LatestAmazonLinuxAmiId:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !Sub ${GetLatestAMI.Arn}
      Owner: "137112412989"
      Name: "amzn2-ami-kernel*"
      Architecture: "x86_64"
